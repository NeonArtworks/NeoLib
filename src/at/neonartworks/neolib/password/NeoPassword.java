package at.neonartworks.neolib.password;

import java.util.Random;


/**
 * 
 * @author Florian Wagner
 *
 */

public class NeoPassword extends NeoCrypt {

	private Random random = new Random();
	private StringBuilder sb;
	private String password;
	private String key;
	private String[] symbols = { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "a", "b", "c", "d", "e", "f",
			"g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A",
			"B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V",
			"W", "X", "Y", "Z", "!", "@", "ö", "ä", "<", ">", "|", "ß", "\\", "/", "§", "$", "%", ";", ",", "&" };

	byte[] arrayBytes;
	@SuppressWarnings("unused")
	private String priKey;
	public static final String DESEDE_ENCRYPTION_SCHEME = "DESede";

	/**
	 * Getter for the Password.
	 * 
	 * @return
	 */

	public String getPassword() {
		return this.password;
	}

	/**
	 * Setter for the Password. Needed to decrypt the password.
	 * 
	 * @param pass
	 */

	public void setPassword(String pass) {
		this.password = pass;
	}

	/**
	 * Returns the Key wich is generated by 'generateKey'. This key is NEEDED to
	 * DECRYPT the Encrypted passowrd to the original.
	 * 
	 * @return
	 */

	public String getKey() {
		return this.key;
	}

	private void setKey(String k) {
		this.key = k;
	}

	/**
	 * Generates a password with the length defined by the Input variable
	 * "length". The Generated password will be returned as String.
	 * 
	 * @param length
	 * @return
	 */

	public String generatePassword(int length) {
		sb = new StringBuilder(length);
		for (int i = 0; i < length; i++) {
			int iRan = random.nextInt(symbols.length);
			sb.append(symbols[iRan]);
		}
		password = sb.toString();
		return password;
	}

	/**
	 * Generates a random Key wich can be used to En/Decrypt the password. This
	 * Key is stored internally and can be retrieved by getKey.
	 */

	public void generateKey() {
		sb = new StringBuilder(25);
		for (int i = 0; i < 25; i++) {
			int iRan = random.nextInt(symbols.length);
			sb.append(symbols[iRan]);
		}
		key = sb.toString();
		setKey(key);
	}
}